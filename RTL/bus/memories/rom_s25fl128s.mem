800007b7
67290799
67a9c31c
02878793
43944705
fee69fe3
879367a9
47050287
9fe34394
67a9fee6
20000713
07b7c798
87938001
67295017
67a9c31c
02878793
43944705
fee69fe3
879367a9
47050287
9fe34394
0637fee6
67a98000
652966a9
10560613
02878793
06a14585
4398c110
feb71fe3
1fe34398
4298feb7
f77d8b05
440164a9
69090491
85226991
2839c080
012407b3
01340533
0413c09c
20390204
ff2415e3
00002137
45018102
801f87b7
36b78793
c31c6729
879367a9
47050287
9fe34394
67a9fee6
02878793
43944705
fee69fe3
672967a9
75d907a1
02870713
86b34390
96ae00a7
fec6ac23
99e30791
8082fee7
00000000
00000000
00000000

/*
void bootloader_read(unsigned int i){
    // s25fl128s_qor
    _addr_qspi[0] = 0x6B + (3<<8) + (16<<11) + (31<<16) + (1<<31);
    while(_addr_qspi[10]!=1){}
    while(_addr_qspi[10]!=1){}
    for(int j=0; j<8; j++){ *(int*)(i+j*4) = _addr_qspi[2+j]; }
}

int __attribute__((naked)) main(){
	//s25fl128s_wren
    _addr_qspi[0] = 0x06 + (1<<31);
    while(_addr_qspi[10]!=1){}
    while(_addr_qspi[10]!=1){}
    
    //s25fl128s_wrr
    _addr_qspi[2] = 1<<9;
    _addr_qspi[0] = 0x01 + (1<<8) + (1<<10) + (1<<16) + (1<<31);
    while(_addr_qspi[10]!=1){}
    while(_addr_qspi[10]!=1){}
    
    do{
        //s25fl128s_rdsr1
        _addr_qspi[0] = 0x05 + (1<<8) + (1<<31);
        while(_addr_qspi[10]!=1){}
        while(_addr_qspi[10]!=1){}
    }
    while(_addr_qspi[2] & 1);
    

    for(int i=0x0000;i<0x2000; i+=32){
        // data memory
        _addr_qspi[1] = i;
        bootloader_read(i);

        // instruction memory    
        _addr_qspi[1] = i+0x2000;
        bootloader_read(i+0x4000);
    }
	asm("li sp, 0x2000\n\t"
        "jr sp");
}
*/